(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22585e"],{e580:function(e,t,l){"use strict";l.r(t);var o=l("7a23"),n=Object(o["createVNode"])("br",null,null,-1);function c(e,t,l,c,r,u){var d=Object(o["resolveComponent"])("VModelChild");return Object(o["openBlock"])(),Object(o["createBlock"])(o["Fragment"],null,[Object(o["createVNode"])("ol",null,[(Object(o["openBlock"])(!0),Object(o["createBlock"])(o["Fragment"],null,Object(o["renderList"])(c.list,(function(e){return Object(o["openBlock"])(),Object(o["createBlock"])("li",{key:e.msg},[Object(o["createVNode"])("h3",null,Object(o["toDisplayString"])(e.msg),1)])})),128))]),n,Object(o["createVNode"])(d,{modelValue:c.childVal,"onUpdate:modelValue":t[1]||(t[1]=function(e){return c.childVal=e})},null,8,["modelValue"]),Object(o["withDirectives"])(Object(o["createVNode"])("input",{"onUpdate:modelValue":t[2]||(t[2]=function(e){return c.inputVal=e}),type:"text"},null,512),[[o["vModelText"],c.inputVal]]),Object(o["createVNode"])("h4",null,Object(o["toDisplayString"])(c.inputVal),1)],64)}function r(e,t,l,n,c,r){return Object(o["openBlock"])(),Object(o["createBlock"])("h3",null,"123")}var u={setup:function(){return{}}};u.render=r;var d=u,a={components:{VModelChild:d},setup:function(){var e=Object(o["ref"])(""),t=Object(o["ref"])("");return{inputVal:e,childVal:t,list:[{msg:"vue3.x v-model 指令增加了 :modelValue 用于指定子组件内部接受 props 的名字"},{msg:"modelValue 只能用于自定义组将，不能用于原生表达组件"},{msg:'使用 modelValue 的自定义组件使用 props 接受父组件传值，使用 emit("update:modelValue", $event.target.value)'},{msg:"vue3.x 支持多个 v-model 绑定，传值和更新和单个 v-model 一致"},{msg:"vue3.x 新增了 v-model 修饰符，可以通过 v-model.xxx 的方式向子组件内部传值，子组件接受到的是 this.$props.modelModifiers 为 { xxx: true }"},{msg:"默认 v-model 修饰符在子组件内部接受的参数是 this.$props.modelModifiers"},{msg:'带有 modelValue 的 v-model 修饰符在子组件内部接受的参数是 this.$props["modelValue" + "Modifiers"]'}]}}};a.render=c;t["default"]=a}}]);
//# sourceMappingURL=chunk-2d22585e.f161b2f3.js.map