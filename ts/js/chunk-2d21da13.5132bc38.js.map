{"version":3,"sources":["webpack:///./src/views/Function.vue","webpack:///./src/views/Function.vue?711d","webpack:///./src/views/Function.vue?a8bb"],"names":["list","item","key","setup","func1","x","y","str","func2","z","numVallue","console","log","render"],"mappings":"uLACE,eAEK,Y,mBADH,eAAqD,2BAAlC,EAAAA,MAAI,SAAZC,G,wBAAX,eAAqD,MAA3BC,IAAKD,EAAM,UAAQA,G,iCCElC,OACbE,MADa,WAEX,SAASC,EAAOC,EAAWC,GACzB,IAAMC,EAAcF,EAAIC,EACxB,OAAOC,EAET,IAAMC,EAAwB,SAACH,EAAGC,EAAGG,GACnC,OAAOJ,EAAIC,EAAIG,GAEXC,EAAY,IAIlB,OAHAC,QAAQC,IAAIF,GAEZF,EAAM,EAAG,EAAG,GACL,CACLJ,QACAI,QACAR,KAAM,CACJ,sFACA,sFACA,wCACA,0DACA,mEACA,oCCvBR,EAAOa,OAASA,EAED","file":"js/chunk-2d21da13.5132bc38.js","sourcesContent":["<template>\n  <ol>\n    <li v-for=\"item in list\" :key=\"item\" v-html=\"item\" />\n  </ol>\n</template>\n\n<script lang=\"ts\">\ninterface func2Interface {\n  (x: number, y: number, z: number): number\n}\nexport default {\n  setup (): { func1: unknown, func2: unknown, list: string[] } {\n    function func1 (x: number, y: string): string {\n      const str: string = x + y\n      return str\n    }\n    const func2: func2Interface = (x, y, z) => {\n      return x + y + z\n    }\n    const numVallue = 123\n    console.log(numVallue)\n\n    func2(1, 2, 3)\n    return {\n      func1,\n      func2,\n      list: [\n        '在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）',\n        '一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，输入多余的（或者少于要求的）参数，是不被允许的，除非用 ? 表示可选的参数',\n        '可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了',\n        'TypeScript 会将添加了默认值的参数识别为可选参数，此时就不受「可选参数必须接在必需参数后面」的限制了',\n        'ES6 中，可以使用 ...rest 的方式获取函数中的剩余参数，事实上，rest 是一个数组。所以我们可以用数组的类型来定义它',\n        '重载允许一个函数接受不同数量或类型的参数时，作出不同的处理'\n      ]\n    }\n  }\n}\n</script>\n","\ninterface func2Interface {\n  (x: number, y: number, z: number): number\n}\nexport default {\n  setup (): { func1: unknown, func2: unknown, list: string[] } {\n    function func1 (x: number, y: string): string {\n      const str: string = x + y\n      return str\n    }\n    const func2: func2Interface = (x, y, z) => {\n      return x + y + z\n    }\n    const numVallue = 123\n    console.log(numVallue)\n\n    func2(1, 2, 3)\n    return {\n      func1,\n      func2,\n      list: [\n        '在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）',\n        '一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，输入多余的（或者少于要求的）参数，是不被允许的，除非用 ? 表示可选的参数',\n        '可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了',\n        'TypeScript 会将添加了默认值的参数识别为可选参数，此时就不受「可选参数必须接在必需参数后面」的限制了',\n        'ES6 中，可以使用 ...rest 的方式获取函数中的剩余参数，事实上，rest 是一个数组。所以我们可以用数组的类型来定义它',\n        '重载允许一个函数接受不同数量或类型的参数时，作出不同的处理'\n      ]\n    }\n  }\n}\n","import { render } from \"./Function.vue?vue&type=template&id=747df800\"\nimport script from \"./Function.vue?vue&type=script&lang=ts\"\nexport * from \"./Function.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}