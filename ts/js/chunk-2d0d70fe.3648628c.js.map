{"version":3,"sources":["webpack:///./src/views/Type.vue","webpack:///./src/views/Type.vue?d97c","webpack:///./src/views/Type.vue?5a2e"],"names":["list","item","key","msg","setup","init","console","log","Color","num","str","boo","und","undefined","arr","tup","obj","name","age","type","render"],"mappings":"yLACE,eAEK,Y,mBADH,eAAyD,2BAAtC,EAAAA,MAAI,SAAZC,G,wBAAX,eAAyD,MAA/BC,IAAKD,EAAKE,IAAK,UAAQF,G,iCCDtC,OACbG,MADa,WAEX,IAAIC,EACJA,EAAO,EAEPA,EAAO,EACPC,QAAQC,IAAIF,GACZ,IAMKG,EANCC,EAAM,IACNC,EAAM,MACNC,GAAM,EACNC,OAAMC,EACNC,EAAgB,CAAC,EAAG,EAAG,GACvBC,EAAwB,CAAC,EAAG,MAClC,SAAKP,GACH,oBACA,sBACA,uBAHF,CAAKA,MAAK,KAKVF,QAAQC,IAAIC,GACZ,IAAMQ,EAAM,CACVC,KAAM,MACNC,IAAK,IAIP,MAAO,CACLC,KAAM,CAAEV,MAAKG,MAAKF,MAAKC,MAAKG,MAAKC,MAAKC,OACtChB,KAAM,CACJ,0DACA,wDACA,mEACA,wDACA,8DACA,sFACA,oCACA,8DACA,iCACA,gEACA,0FACA,uCACA,oFCtCR,EAAOoB,OAASA,EAED","file":"js/chunk-2d0d70fe.3648628c.js","sourcesContent":["<template>\n  <ol>\n    <li v-for=\"item in list\" :key=\"item.msg\" v-html=\"item\" />\n  </ol>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  setup (): { type: unknown; list: string[] } {\n    let init: number\n    init = 1\n    // init = '2'\n    init = 2\n    console.log(init)\n    const num = 123\n    const str = 'str'\n    const boo = false\n    const und = undefined\n    const arr: number[] = [1, 2, 3]\n    const tup: [number, string] = [1, '2']\n    enum Color {\n      Red = 1,\n      Pink,\n      Blue = 4\n    }\n    console.log(Color)\n    const obj = {\n      name: 'ycn',\n      age: 25\n    }\n    // obj.age = '' // error\n    // tup.push(true)\n    return {\n      type: { num, und, str, boo, arr, tup, obj },\n      list: [\n        'TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用',\n        'Typescript 声明变量需要进行类型注解，但是同时 Typescript 也会对变量类型进行类型推断',\n        '最基本的数据类型就是简单的 true/false 值，在 JavaScript 和 TypeScript 里叫做 boolean',\n        '和JavaScript一样，TypeScript里的所有数字都是浮点数，这些浮点数的类型是 number。',\n        'TypeScript 用 string 表示文本数据类型，可以使用双引号（\"）或单引号（\\'）或模板字符串表示字符串。',\n        'TypeScript 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组。第二种方式是使用数组泛型，Array<元素类型>',\n        '元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同',\n        'enum类型是对JavaScript标准数据类型的一个补充。 像其它语言一样，使用枚举类型可以为一组数值赋予友好的名字',\n        'TypeScript 用 any 类型来标记不清楚类型的变量',\n        'void 类型像是与 any 类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void',\n        'TypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。 和 void 相似，它们的本身的类型用处不是很大',\n        'TypeScript 用 never 类型表示的是那些永不存在的值的类型',\n        '当在你清楚地知道一个实体具有比它现有类型更确切的类型，你可以通过断言告诉进行类似类型转换的功能。类型断言有两种形式，其一是“尖括号”语法，另一个为as语法'\n      ]\n    }\n  }\n}\n</script>\n","\nexport default {\n  setup (): { type: unknown; list: string[] } {\n    let init: number\n    init = 1\n    // init = '2'\n    init = 2\n    console.log(init)\n    const num = 123\n    const str = 'str'\n    const boo = false\n    const und = undefined\n    const arr: number[] = [1, 2, 3]\n    const tup: [number, string] = [1, '2']\n    enum Color {\n      Red = 1,\n      Pink,\n      Blue = 4\n    }\n    console.log(Color)\n    const obj = {\n      name: 'ycn',\n      age: 25\n    }\n    // obj.age = '' // error\n    // tup.push(true)\n    return {\n      type: { num, und, str, boo, arr, tup, obj },\n      list: [\n        'TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用',\n        'Typescript 声明变量需要进行类型注解，但是同时 Typescript 也会对变量类型进行类型推断',\n        '最基本的数据类型就是简单的 true/false 值，在 JavaScript 和 TypeScript 里叫做 boolean',\n        '和JavaScript一样，TypeScript里的所有数字都是浮点数，这些浮点数的类型是 number。',\n        'TypeScript 用 string 表示文本数据类型，可以使用双引号（\"）或单引号（\\'）或模板字符串表示字符串。',\n        'TypeScript 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组。第二种方式是使用数组泛型，Array<元素类型>',\n        '元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同',\n        'enum类型是对JavaScript标准数据类型的一个补充。 像其它语言一样，使用枚举类型可以为一组数值赋予友好的名字',\n        'TypeScript 用 any 类型来标记不清楚类型的变量',\n        'void 类型像是与 any 类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void',\n        'TypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。 和 void 相似，它们的本身的类型用处不是很大',\n        'TypeScript 用 never 类型表示的是那些永不存在的值的类型',\n        '当在你清楚地知道一个实体具有比它现有类型更确切的类型，你可以通过断言告诉进行类似类型转换的功能。类型断言有两种形式，其一是“尖括号”语法，另一个为as语法'\n      ]\n    }\n  }\n}\n","import { render } from \"./Type.vue?vue&type=template&id=72cc9783\"\nimport script from \"./Type.vue?vue&type=script&lang=ts\"\nexport * from \"./Type.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}