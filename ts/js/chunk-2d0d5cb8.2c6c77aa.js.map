{"version":3,"sources":["webpack:///./src/views/Generic.vue","webpack:///./src/views/Generic.vue?d1a3","webpack:///./src/views/Generic.vue?6569"],"names":["list","item","key","setup","echo","arg","console","log","person","name","age","newPerson","phone","render"],"mappings":"yLACE,eAEK,Y,mBADH,eAAqD,2BAAlC,EAAAA,MAAI,SAAZC,G,wBAAX,eAAqD,MAA3BC,IAAKD,EAAM,UAAQA,G,iCCDlC,OACbE,MADa,WAEX,SAASC,EAASC,GAEhB,OADAC,QAAQC,IAAIF,GACLA,EAGTD,EAAK,QACLA,EAAK,KACLA,GAAK,GAOL,IAAMI,EAAiB,CACrBC,KAAM,MACNC,IAAK,IAGPJ,QAAQC,IAAIC,GAMZ,IAAMG,EAAuB,CAC3BC,MAAO,eAKT,OAFAN,QAAQC,IAAII,GAEL,CACLX,KAAM,CACJ,4DACA,kDACA,gICnCR,EAAOa,OAASA,EAED","file":"js/chunk-2d0d5cb8.2c6c77aa.js","sourcesContent":["<template>\n  <ol>\n    <li v-for=\"item in list\" :key=\"item\" v-html=\"item\" />\n  </ol>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  setup (): { list: string[] } {\n    function echo<T> (arg: T): T {\n      console.log(arg)\n      return arg\n    }\n\n    echo('echo')\n    echo(666)\n    echo(false)\n\n    interface Person {\n      name: string,\n      age: number\n    }\n\n    const person: Person = {\n      name: 'ycn',\n      age: 18\n    }\n\n    console.log(person)\n\n    type GetNewPerson<T> = { [P in keyof T]?: T[P] }\n\n    type NewPerson = GetNewPerson<Person> & { phone: string }\n\n    const newPerson: NewPerson = {\n      phone: '18338112210'\n    }\n\n    console.log(newPerson)\n\n    return {\n      list: [\n        '泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。',\n        '定义泛型的时候，可以一次定义多个类型参数，同时我们需要传入符合约束类型的值，必须包含必须的属性',\n        '<a href=\"https://blog.csdn.net/azl397985856/article/details/106913210\" target=\"_blank\">你不知道的 TypeScript 泛型（万字长文，建议收藏）</a>'\n      ]\n    }\n  }\n}\n</script>\n","\nexport default {\n  setup (): { list: string[] } {\n    function echo<T> (arg: T): T {\n      console.log(arg)\n      return arg\n    }\n\n    echo('echo')\n    echo(666)\n    echo(false)\n\n    interface Person {\n      name: string,\n      age: number\n    }\n\n    const person: Person = {\n      name: 'ycn',\n      age: 18\n    }\n\n    console.log(person)\n\n    type GetNewPerson<T> = { [P in keyof T]?: T[P] }\n\n    type NewPerson = GetNewPerson<Person> & { phone: string }\n\n    const newPerson: NewPerson = {\n      phone: '18338112210'\n    }\n\n    console.log(newPerson)\n\n    return {\n      list: [\n        '泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。',\n        '定义泛型的时候，可以一次定义多个类型参数，同时我们需要传入符合约束类型的值，必须包含必须的属性',\n        '<a href=\"https://blog.csdn.net/azl397985856/article/details/106913210\" target=\"_blank\">你不知道的 TypeScript 泛型（万字长文，建议收藏）</a>'\n      ]\n    }\n  }\n}\n","import { render } from \"./Generic.vue?vue&type=template&id=4d05b684\"\nimport script from \"./Generic.vue?vue&type=script&lang=ts\"\nexport * from \"./Generic.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}