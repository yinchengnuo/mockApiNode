{"version":3,"sources":["webpack:///./src/views/Enum.vue","webpack:///./src/views/Enum.vue?b242","webpack:///./src/views/Enum.vue?2081"],"names":["list","item","key","setup","Enum1","Enum2","Enum3","Enum4","console","log","a","A","B","render"],"mappings":"yLACE,eAEK,Y,mBADH,eAAqD,2BAAlC,EAAAA,MAAI,SAAZC,G,wBAAX,eAAqD,MAA3BC,IAAKD,EAAM,UAAQA,G,iCCDlC,OACbE,MADa,WAEX,IAAKC,EAGAC,EAKAC,EAIAC,EAQL,OApBA,SAAKH,GACH,gBAAG,gBAAG,gBADR,CAAKA,MAAK,KAGV,SAAKC,GACH,WACA,WACA,WAHF,CAAKA,MAAK,KAKV,SAAKC,GACH,gBACA,gBAFF,CAAKA,MAAK,KAIV,SAAKC,GACH,gBACA,aAFF,CAAKA,MAAK,KAIVC,QAAQC,IAAIL,EAAOA,EAAMM,GACzBF,QAAQC,IAAIJ,EAAOA,EAAMK,GACzBF,QAAQC,IAAIH,EAAOA,EAAMK,GACzBH,QAAQC,IAAIF,EAAOA,EAAMK,GAClB,CACLZ,KAAM,CACJ,2EACA,4DACA,8CACA,gCACA,wEACA,kDACA,wDACA,sCC7BR,EAAOa,OAASA,EAED","file":"js/chunk-2d0abfed.a48db57e.js","sourcesContent":["<template>\n  <ol>\n    <li v-for=\"item in list\" :key=\"item\" v-html=\"item\" />\n  </ol>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  setup (): { list: string[] } {\n    enum Enum1 {\n      a, b, c\n    }\n    enum Enum2 {\n      a = 'a',\n      b = 'c',\n      c = 'c'\n    }\n    enum Enum3 {\n      A = 1,\n      B\n    }\n    enum Enum4 {\n      A,\n      B = 'yyy'\n    }\n    console.log(Enum1, Enum1.a)\n    console.log(Enum2, Enum2.a)\n    console.log(Enum3, Enum3.A)\n    console.log(Enum4, Enum4.B)\n    return {\n      list: [\n        '使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript 支持数字的和基于字符串的枚举。',\n        '字符串枚举是不可以做双向映射的。把数字枚举和字符串枚举混用，就形成了异构枚举，这种方式很容易引起混淆，不推荐使用。',\n        '在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。',\n        '枚举成员的值不可修改，枚举成员可以分为常量的和需要计算的。',\n        '常量枚举成员会在编译时计算出结果，然后以常量的形式，出现在运行时环境，需要计算的枚举成员的值不会在编译阶段计算，而是保留到程序的执行阶段。',\n        '常量枚举其实就是是在 enum 关键字前使用 const 修饰符 常量枚举会在编译阶段被移除。',\n        '当我们不需要一个对象，而需要对象的值，就可以使用常量枚举，这样就可以避免在编译时生成多余的代码和间接引用。',\n        '常量枚举成员在使用的地方被内联进来，且常量枚举不可能有计算成员'\n      ]\n    }\n  }\n}\n</script>\n","\nexport default {\n  setup (): { list: string[] } {\n    enum Enum1 {\n      a, b, c\n    }\n    enum Enum2 {\n      a = 'a',\n      b = 'c',\n      c = 'c'\n    }\n    enum Enum3 {\n      A = 1,\n      B\n    }\n    enum Enum4 {\n      A,\n      B = 'yyy'\n    }\n    console.log(Enum1, Enum1.a)\n    console.log(Enum2, Enum2.a)\n    console.log(Enum3, Enum3.A)\n    console.log(Enum4, Enum4.B)\n    return {\n      list: [\n        '使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript 支持数字的和基于字符串的枚举。',\n        '字符串枚举是不可以做双向映射的。把数字枚举和字符串枚举混用，就形成了异构枚举，这种方式很容易引起混淆，不推荐使用。',\n        '在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。',\n        '枚举成员的值不可修改，枚举成员可以分为常量的和需要计算的。',\n        '常量枚举成员会在编译时计算出结果，然后以常量的形式，出现在运行时环境，需要计算的枚举成员的值不会在编译阶段计算，而是保留到程序的执行阶段。',\n        '常量枚举其实就是是在 enum 关键字前使用 const 修饰符 常量枚举会在编译阶段被移除。',\n        '当我们不需要一个对象，而需要对象的值，就可以使用常量枚举，这样就可以避免在编译时生成多余的代码和间接引用。',\n        '常量枚举成员在使用的地方被内联进来，且常量枚举不可能有计算成员'\n      ]\n    }\n  }\n}\n","import { render } from \"./Enum.vue?vue&type=template&id=2c48835c\"\nimport script from \"./Enum.vue?vue&type=script&lang=ts\"\nexport * from \"./Enum.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}